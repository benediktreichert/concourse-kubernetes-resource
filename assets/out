#!/bin/sh

set -e -u

exec 3>&1
exec 1>&2

source shared.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

cd $source

readSourceArguments $payload

image_file=$(jq -r '.params.image // empty' < $payload)
if [ -z "$image_file" ]; then
    echo image_file not set >&2
    exit 1
fi
image=$(cat $image_file)

tag=$(jq -r '.params.tag // empty' < $payload)
tag_file=$(jq -r '.params.tag_file // empty' < $payload)
if [ -n "$tag_file" ]; then
    tag=$(cat $tag_file)
elif [ -z "$tag" ]; then
     echo tag and tag_file not set >&2
     exit 1
fi

digest_file=$(jq -r .params.digest_file < $payload)
if [ -z "$digest_file" ]; then
    echo digest_file not set >&2
    exit 1
fi
digest=$(cat $digest_file)

if [ -z "$username" ]; then
    pwd=$(dirname $0)
    cluster_cert_path="$pwd/ca.pem"
    client_cert_path="$pwd/cert.pem"
    client_key_path="$pwd/key.pem"

    echo $cluster_cert | base64 -d > $cluster_cert_path
    echo $client_cert | base64 -d > $client_cert_path
    echo $client_key | base64 -d > $client_key_path

    kubectl --server=$master --namespace=$namespace \
            --certificate-authority=$cluster_cert_path \
            --client-key=$client_key_path --client-certificate=$client_cert_path \
            set image $resource_type/$resource_name $container=$image@$digest
else
    kubectl --server=$master --namespace=$namespace \
            --username=$username --password=$password \
            --insecure-skip-tls-verify \
            set image $resource_type/$resource_name $container=$image@$digest
fi

jq -n "{
  version: {
    image: $(echo $image@$digest | jq -R .)
  }
}" >&3
